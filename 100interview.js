//                        游눝游눜游밼ANuj游댅Kashyap游눝游눛游눞

//游댮游리游릭游댯游릮游댮游리游릭游댯游릮游댮游리游릭游댯游릮游댮游리游릭游댯游릮游댮游리游릭游댯游릮游댮游리游릭游댯游릮游댮游리游릭游댯游릮
// *******************************************************************************************
//游리Question:1  What is typeof []
//游릭Answer: Object. Actually Array is derived from Object. If you want to check array use Array.isArray(arr).
// ************************************************************************************************************************

//游리Question:2

// let a = [];
// let b = [];
// console.log(a == b); //false
// console.log(a === b); //false
//游릭Explaination : Here we are comparing memory location, not an array. Memory location of 2 arrays are not same.

// ************************************************************************************************************************
//游리Question:3
// let a = [];
// let b = a;
// console.log(a == b); //true
// console.log(a === b); //true
//游릭Explaination : Here we are assigning a to b, where memory location is now same.

// ************************************************************************************************************************
//游리Question:4
// let z = [1, 2, 3];
// let a = { name: "Anuj" };
// console.log(...z); // 1 2 

//游릭Explaination : ...z means destructing happened i.e, all the elements are come out from an array/object.

// ************************************************************************************************************************
//游리Question:4
// const set = new Set([1, 1, 2, 2, 3, 4, 5]);
// console.log(set); //{1,2,3,4,5}

//游릭Explaination : The Set object lets you store unique values of any type.It will remove duplicate values.
 
// ************************************************************************************************************************
//游리Question:5
// const data = ["Anuj", "Ajay", "Ajeet"];
// const [y] = data;
// console.log(y); //"Anuj"
//游릭Explaination : We are doing destructuring here. y is representing the first index only

//游리 
//const data = ["Anuj", "Ajay", "Ajeet"];
// const [y,z] = data;
// console.log(y,z); //"Anuj", "Ajay"
//游릭Explaination : We are doing destructuring here. y is representing the first index only and z representing the second index.
// ************************************************************************************************************************
//游리Question:6
//Spread Operator
// const arr=[3,4,3,2,42,2];
// const myfun=(Result)=>{
//     return Result;
// }
// console.log(myfun([...arr]));//[ 3, 4, 3, 2, 42, 2 ]
//游릭 at the time of function calling it takes the array of input. 


//游리
//REST Operator
//  const myfun=(a,b,c,...restvalues)=>{
//     // return a+b+c;
//     return restvalues;
//  }
//  console.log( myfun(2,4,2,3,5,6,4,2,));
 
//游릭 the rest value store in the form of Array.Using the rest parameter will pass the arguments as array elements.

// ************************************************************************************************************************
//游리Question:7
// let data ={name:"Anuj"}
// let data1={city:"Lucknow"}
// data = {data, ...data1} //merge 2 objects
// console.log(data); // { "data" : {name:"Anuj"}, "city": "Lucknow"}

//游릭 Explaination :Three dots will pop out the property from an object and assign inside curly brackets. If we didn't do destructing or spread operator then key will be object name(i.e, data) and assign the value as whole object into it.

// ************************************************************************************************************************
//游리Question:8
//console.log(Promise.resolve(5)); //Promise {<fulfilled>: 5}

//游릭Explaination : While doing resolve(), itself here a promise. If we pass number/string etc then it will print fulfilled.

// ************************************************************************************************************************

//游리Question:9
// JSON.parse ?

// Parse JSON object to a JavaScript value // converting data into js object

//游릭Explaination :
// var jsonPerson = '{"first_name":"billy", "age":23}';
// var personObject = JSON.parse(jsonPerson); //parse json string into JS object

//console.log(typeof(jsonPerson)); //string
//console.log(typeof(personObject)); //object


// ************************************************************************************************************************
//Hoisting used here

// let name  = "Anuj";
// function getName(){
//   console.log(name); //Uncaught ReferenceError: Cannot access 'name' before initialization 
//   let name = "Ajeet";
// }
// getName();
//游릭Explaination : Hoisting used here. If we use VAR then can use variable before declare. But in LET we can't do that. LET/CONST need declaration first then can use it.
// ************************************************************************************************************************
 //游리Question:10     
// let name  = "Anuj";
// function getName(){
//   console.log(name); //Anuj
// }
// getName();
//游릭Explaination : Let is a block scope.Because of closures we can able to access name which is outside of a function with LET.
// ************************************************************************************************************************
 //游리Question:10 
// let person = {name: "Anuj"};
// Object.seal(person); //post seal, how can you modify the person object
// person.age ="1000";
// person.name ="Ajay";
// console.log(person); //{name : "Ajay"}

//游릭Explaination : Onceyou use Seal we can't able to add the more keys with values into it.But you can modigy the existing key.

// ************************************************************************************************************************
//游리Question:11      shift游댄Pop

// let data = [2,9,0,10];
// data.shift();//remove first element
// console.log(data); //[9,0,10]
// data.pop(); //remove last element
// console.log(data);//[9,0]
//游릭Explaination : shift and pop use to remove the elements from first and last index.
 
// ************************************************************************************************************************
//游리Question:12 //check the value is even or odd
// let a =10;
// console.log(a%2===0 ? true : false); //true

//游릭Explaination : Need to divide by 2 and then checking if reminder is zero/one.

// ************************************************************************************************************************
//游리Question:12
// let data ={ name : "anuj"};
// delete data.name;
// console.log(data); //{}
//游릭Explaination : delete always work with object properties not a object itself.
// ************************************************************************************************************************
//游리Question:12

// 游릭Diff between Map and foreach: Map will return new thing but Foreach didn't return anything.

// 游댅forEach()-->
// Example:
// const numbers = [1, 2, 3, 4];
// numbers.forEach(function(num) {//does not return anything
//   console.log(num * 2);
// });
// Output: 2 4 6 8

// 游댄map()-->

// const doubledNumbers = numbers.map(function(num) { //retrun the value
//   return num * 2;
// });
// console.log(doubledNumbers);
// Output: [2, 4, 6, 8]

// loop through the elements allocates memory 
// and stores return values by iterating main array

// ************************************************************************************************************************
//游리Question:13 //merge 2 arrays
// const a =[1,2,3];
// const b =[4,5,6];
// const c =[...a, ...b]
// console.log(c); //[1,2,3,4,5,6]

//游릭Explaination : using spread operator

// ************************************************************************************************************************
//游리Question:14
// let a=2;
// setTimeout(()=>{
//   console.log(a); //100
// },0)
// a=100;

//游릭Explaination : Here we are using zero time interval. setTimeout is async function so it will execute at last. Firstly all the sync code will get execute. so that's why 100 is assigned to a.

// ************************************************************************************************************************

//游리Question:15
// function fruit(){
//   console.log(name); //undefined
//   console.log(price); //Error
//   var name = "priya";
//   let price = 1000;
// }
// fruit()
//游릭Explaination : Hoisting concept used here. Error because in LET declaration first then only we can use it. but in var we can use brfore its declaration.

// ************************************************************************************************************************
//游리Question:15

// for(var i=0; i<3; i++){ //i=0 //1 //2 //3
//   setTimeout(()=>console.log(i),1) // 3,3,3
// }
//游릭Explaination : Var is a global variable. Firstly Sync code get executed then async code will start to execute. so i value incremented from 0 to 3 when pointer reaches to setTimeout so it will print 3 thrice time.

// ************************************************************************************************************************
//游리Question:16
// for(let i=0; i<3; i++){ //i=0 //1 //2 //3
//   setTimeout(()=>console.log(i),1) //0 //1 //2
// }

//游릭Explaination : LET is a block scope. so it will print 0,1,2. Its having own islocated scope.

// ************************************************************************************************************************
//游리Question:16
// let data = "size";
// const bird = {size : "small"}
// console.log(bird[data]); //small
// console.log(bird["size"]); //small
// console.log(bird.size); //small
// console.log(bird.data); //undefined

//游릭Explaination : If we wants to access variable with object then use [] notation(. notation will not work).

// ************************************************************************************************************************
//游리Question:17    //preincrement and postincremen
// let num = 0;
// console.log(num++); //0
// console.log(++num); //2
// console.log(num); //2

//游릭Explaination : ++ will increase the value by 1. preincrement and postincrement used here.

// ************************************************************************************************************************
//游리Question:18 

// for(let i=1; i<5; i++){
//   if(i==3) continue;
//   console.log(i); //1,2,4
// }
//游릭Explaination : If i =3 then it will not execute the code for 3, but can execute for i=4.

// ************************************************************************************************************************
//游리Question:19 
// const foo = () => console.log("first");
// const bar = () => setTimeout(()=> console.log("second"));
// const baz = () => console.log("third");
// bar();
// foo();
// baz();
//游릭Explaination : first,third, second. Because asyn operation work post all the syn operation get complete.

// ************************************************************************************************************************
//游리Question:20

// console.log(setInterval(()=>console.log('Hi'), 1000));
// console.log(setInterval(()=>console.log('Hi'), 1000));
// console.log(setInterval(()=>console.log('Hi'), 1000));

//游릭Explaination: setInterval will give uniques id to stop. It will give like 1,2,3. so it will print 1,2,3,Hi,Hi, Hi, Hi, Hi, .....so on

// ************************************************************************************************************************// ************************************************************************************************************************

//游리Question:21
// console.log(setTimeout(()=>console.log('Hi'), 1000));
// console.log(setTimeout(()=>console.log('Hi'), 1000));
// console.log(setTimeout(()=>console.log('Hi'), 1000));

//游릭Explaination : it will print 1,2,3,Hi,Hi, Hi.

// ************************************************************************************************************************
//游리Question:21

//console.log([..."Anuj"]); //[ 'A', 'n', 'u', 'j' ]

//游릭Explaination: It will convert into an array.

// ************************************************************************************************************************
//游리Question:22

// const person = {name: "Anuj", age: 1000};
// for(const item in person){
//   console.log(item); //name, age
// }
//游릭Explaination: For in loop give a keys only.
// ************************************************************************************************************************// ************************************************************************************************************************
//游리Question:23
// let data = [1,2,3].map( num =>{
//   if (typeof num === 'number') return;
//   return num*2;
// })
// console.log(data); //[undefined,undefined,undefined]

//游릭Explaination: If just return then it will print undefined.

// ************************************************************************************************************************
 //游리Question:24 //Map function
// const array1 = [1, 4, 9, 16];

// // Pass a function to map
// const map1 = array1.map(x => x * 2);
// console.log(map1);

// Expected output: Array [2, 8, 18, 32]
//游릭The map() method creates a new array
// ************************************************************************************************************************
// ************************************************************************************************************************
// ************************************************************************************************************************
// ************************************************************************************************************************

// ************************************************************************************************************************// ************************************************************************************************************************// ************************************************************************************************************************
